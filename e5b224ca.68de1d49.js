(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(1),o=n(9),s=(n(0),n(154)),r={id:"data-models",title:"Data Models and Relations"},i={id:"data-models",title:"Data Models and Relations",description:"A few notes about ORMs:",source:"@site/docs/data-models.md",permalink:"/objection-workshop/docs/data-models",editUrl:"https://github.com/stackworx/objection-workshop/edit/master/docs/docs/data-models.md",sidebar:"someSidebar",previous:{title:"Migrations",permalink:"/objection-workshop/docs/migrations"},next:{title:"Create and fetch services",permalink:"/objection-workshop/docs/create-and-fetch"}},l=[{value:"1. Create objection classes for person and pet",id:"1-create-objection-classes-for-person-and-pet",children:[]}],c={rightToc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"A few notes about ORMs:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Object relational mappers are used to represent data entities and their relations."),Object(s.b)("li",{parentName:"ul"},"They are the workhorses of your backend services, especially with CRUD."),Object(s.b)("li",{parentName:"ul"},"A manner of representing SQL-related processes in an object-oriented fashion."),Object(s.b)("li",{parentName:"ul"},"Helps to abstract complexity of SQL interfacing with the database."),Object(s.b)("li",{parentName:"ul"},"A double-edged sword.")),Object(s.b)("h3",{id:"1-create-objection-classes-for-person-and-pet"},"1. Create objection classes for person and pet"),Object(s.b)("p",null,"An objection class representing a standalone person has been created (see below)"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export class Person extends Model {\n  // every column (property) in the table should be typed\n  id!: number;\n  name!: string;\n  age!: number;\n  surname!: string;\n  pets: Array<Pet>;\n\n  static get tableName() {\n    return 'person';\n  }\n\n  static get relationMappings() {\n    return {\n      name: {\n        relation: Model.HasManyRelation,\n        modelClass: Person,\n        join: {\n          from: 'person.id',\n          //knexSnakeCaseMappers plugin enables snakecase\n          to: 'person.parentId',\n        },\n      },\n    };\n  }\n}\n")),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Create another file for ",Object(s.b)("inlineCode",{parentName:"li"},"Pet")," and specify a Pet's relation to it's owner."),Object(s.b)("li",{parentName:"ul"},"Create another class representing a pet (you can do it in the same file to spend less time importing)."),Object(s.b)("li",{parentName:"ul"},"Set up the pets relation for the user class by specifying ",Object(s.b)("inlineCode",{parentName:"li"},"relationMappings"),".")),Object(s.b)("h4",{id:"notes"},"Notes"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Not all relations have to be explicitly declared. If you only cared about querying the pets of specific owners (and not the owner of pets, declaring the ",Object(s.b)("inlineCode",{parentName:"li"},"Pet to Owner")," relation would not have been necessary)."),Object(s.b)("li",{parentName:"ul"},"Objection automatically assumes the name of your table is the name of your class, unless indicated otherwise."),Object(s.b)("li",{parentName:"ul"},"Relations can be singular, plural, defined, or undefined depending on the relationships."),Object(s.b)("li",{parentName:"ul"},"Objection is (mostly) smart enough to tell you when you've specified the wrong types of relationships, but this is can be a likely bug source."),Object(s.b)("li",{parentName:"ul"},"This page always comes in handy when specifying relations between objection classes."),Object(s.b)("li",{parentName:"ul"},"Types of all relations have to be added to the top of the class.")))}p.isMDXComponent=!0}}]);
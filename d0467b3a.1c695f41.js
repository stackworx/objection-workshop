(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{146:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var a=t(1),i=t(9),o=(t(0),t(154)),r={id:"migrations",title:"Migrations",sidebar_label:"Migrations"},l={id:"migrations",title:"Migrations",description:"A few notes about migrations:",source:"@site/docs/migrations.md",permalink:"/objection-workshop/docs/migrations",editUrl:"https://github.com/stackworx/objection-workshop/edit/master/docs/docs/migrations.md",sidebar_label:"Migrations",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/objection-workshop/docs/getting-started"},next:{title:"Data Models and Relations",permalink:"/objection-workshop/docs/data-models"}},c=[{value:"1. Set up a database connection (completed)",id:"1-set-up-a-database-connection-completed",children:[]},{value:"2. Initialise knex and add our connection (completed)",id:"2-initialise-knex-and-add-our-connection-completed",children:[]},{value:"3. Create your first migration file (completed)",id:"3-create-your-first-migration-file-completed",children:[]},{value:"4. Add tables and columns",id:"4-add-tables-and-columns",children:[]},{value:"7. Run your migration first migration",id:"7-run-your-migration-first-migration",children:[]},{value:"8. And tear it down again",id:"8-and-tear-it-down-again",children:[]}],s={rightToc:c};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A few notes about migrations:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Migrations are responsible for putting your database structure in to place."),Object(o.b)("li",{parentName:"ul"},"Each migration file consist of two functions (",Object(o.b)("inlineCode",{parentName:"li"},"up")," and ",Object(o.b)("inlineCode",{parentName:"li"},"down"),"), which should add and remove your schema, respectively."),Object(o.b)("li",{parentName:"ul"},"Migration files live under ",Object(o.b)("inlineCode",{parentName:"li"},"server/src/migrations")," in all of our projects and are normally denoted by ",Object(o.b)("inlineCode",{parentName:"li"},"[dateTimestamp]_[userDefinedSuffix]"),"."),Object(o.b)("li",{parentName:"ul"},"In this workshop, we'll only be writing a single migration (",Object(o.b)("inlineCode",{parentName:"li"},"timestamp_init"),"), but keep in mind new ones can be added at any time to accommodate new functionality/requirements.")),Object(o.b)("p",null,"Conventions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Database names should be singular where possible and in snake_case (for postgres at least)")),Object(o.b)("h3",{id:"1-set-up-a-database-connection-completed"},"1. Set up a database connection (completed)"),Object(o.b)("p",null,"Create a file ",Object(o.b)("inlineCode",{parentName:"p"},"db.ts")," in the source root of your folder and copy the following contents:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="src/db.ts"',title:'"src/db.ts"'}),"import Knex from 'knex';\nimport {knexSnakeCaseMappers, Model} from 'objection';\n\n// configure knex to connect to our database\n// these details normally come from environment variables\nexport const knexConfig = {\n  client: 'postgres',\n  connection: {\n    host: '127.0.0.1',\n    user: 'postgres',\n    password: 'password',\n  },\n  pool: {\n    min: 2,\n    max: 10,\n  },\n  // convenience utility to for knex to automatically convert snake_case to camelCase\n  ...knexSnakeCaseMappers(),\n};\n\nexport const knex = Knex({\n  ...knexConfig,\n});\n\n// is this part necessary?\nModel.knex(knex);\n")),Object(o.b)("h3",{id:"2-initialise-knex-and-add-our-connection-completed"},"2. Initialise knex and add our connection (completed)"),Object(o.b)("p",null,"In your root file, initialise knex with the following command:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"npx knex init")),Object(o.b)("p",null,"which creates a ",Object(o.b)("em",{parentName:"p"},"knexfile.js")," containing information about the files relating to our migrations."),Object(o.b)("p",null,"This file is used to tell knex what migrations to execute in specific environments (denoted by NODE_ENV). Below you can see our migration config for ",Object(o.b)("inlineCode",{parentName:"p"},"NODE_ENV=development")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript",metastring:'title="knexfile.js"',title:'"knexfile.js"'}),"///\nconst {knexSnakeCaseMappers} = require('objection');\nconst {connection} = require('./src/db');\n\nmodule.exports = {\n  development: {\n    debug: false, //should knex spit out the executed sql statements for debugging?\n    client: 'postgres', //database we're using\n    connection, //add connection config to our database we just created\n    pool: {  //specify number of active connections allowed\n      min: 2,\n      max: 10,\n    },\n    seeds: {\n      directory: './src/seeds/dev', //seeds are the most likely to change across environments\n    },\n    migrations: { //directory methods\n      directory: './src/migrations',\n    },\n    ...knexSnakeCaseMappers(),\n  },\n  test: {\n    //\n  }\n  production: {\n    // ...\n  }\n")),Object(o.b)("h3",{id:"3-create-your-first-migration-file-completed"},"3. Create your first migration file (completed)"),Object(o.b)("p",null,"In a terminal create the following path and navigate to it:\n",Object(o.b)("inlineCode",{parentName:"p"},"src/migrations/dev"),"\nand run\n",Object(o.b)("inlineCode",{parentName:"p"},"npx knex migrate:make init -ts")),Object(o.b)("p",null,"A file denoted by ",Object(o.b)("inlineCode",{parentName:"p"},"[datetime_init.ts]")," containing pre-created up and down functions with the following contents:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import Knex from 'knex';\n\nexport async function up(knex: Knex) {}\n\nexport async function down(knex: Knex) {}\n")),Object(o.b)("h3",{id:"4-add-tables-and-columns"},"4. Add tables and columns"),Object(o.b)("p",null,"We've already added code to the initial migration time to create a ",Object(o.b)("inlineCode",{parentName:"p"},"person")," table (see code snippet below). Note that all tables should always have a primary key"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export async function up(knex: Knex) {\n  await knex.schema.createTable('person', (table) => {\n    table.increments('id').primary();\n    table.string('firstname');\n    table.string('surname');\n  });\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Add an ",Object(o.b)("inlineCode",{parentName:"li"},"age")," column to the existing table with an integer type")),Object(o.b)("h4",{id:"5-setting-up-relations-and-constraints-between-tables"},"5. Setting up relations and constraints between tables"),Object(o.b)("p",null,"Create another table ",Object(o.b)("inlineCode",{parentName:"p"},"pet")," to catalog a list of pets. The table should have the following columns:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"id: primary key"),Object(o.b)("li",{parentName:"ul"},"name: string (notNullable)"),Object(o.b)("li",{parentName:"ul"},"personId: integer, with a foreign key referencing the person's id (notNullable)")),Object(o.b)("p",null,"Foreign keys can be created with the following syntax:\n",Object(o.b)("inlineCode",{parentName:"p"},"table.integer([columnName]).references([parentTable.columnName])")),Object(o.b)("h3",{id:"7-run-your-migration-first-migration"},"7. Run your migration first migration"),Object(o.b)("p",null,"We migrate often in projects, so a script has been set up in ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," to run forward migrations with:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"yarn migrate")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Open up a terminal in your project directory, and run the command above."),Object(o.b)("li",{parentName:"ul"},"Confirm that the table has appeared in your database with a connection client")),Object(o.b)("h3",{id:"8-and-tear-it-down-again"},"8. And tear it down again"),Object(o.b)("p",null,"We've already added code to remove the person table in the ",Object(o.b)("inlineCode",{parentName:"p"},"down")," function."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Use this as an example to complete the reverse migration by removing the ",Object(o.b)("inlineCode",{parentName:"li"},"pet")," table as well."),Object(o.b)("li",{parentName:"ul"},"Backward migrations can be run run with ",Object(o.b)("inlineCode",{parentName:"li"},"yarn rollback")),Object(o.b)("li",{parentName:"ul"},"Confirm the tables you have created has now been removed")),Object(o.b)("h4",{id:"notes"},"Notes"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If you're running into an error when rolling back, remember that tables should be removed in the opposite order in which they are created, otherwise dependencies prevents the dropping of tables.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'migration failed with error: drop table "person" - cannot drop table person because other objects depend on it\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"To prevent unforeseen migration failures in future, always ensure the tables you add in ",Object(o.b)("inlineCode",{parentName:"li"},"up")," are removed in ",Object(o.b)("inlineCode",{parentName:"li"},"down")," (this happens more than you think!)."),Object(o.b)("li",{parentName:"ul"},"Always test forward and backwards migrations thoroughly before opening a PR."),Object(o.b)("li",{parentName:"ul"},"Stuck? ",Object(o.b)("inlineCode",{parentName:"li"},"docker-compose down -v")," to remove all volumes and start again.")),Object(o.b)("h4",{id:"references"},"References"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://knexjs.org/"}),"https://knexjs.org/"))))}b.isMDXComponent=!0}}]);
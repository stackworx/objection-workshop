(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{143:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return d}));var r=n(1),o=n(9),a=(n(0),n(154)),s={id:"create-and-fetch",title:"Create and fetch services"},c={id:"create-and-fetch",title:"Create and fetch services",description:"Let's use this model we built to perform to basic operations on a Person. We'll create a PersonService class with stati methods to encompass this logic",source:"@site/docs/create-and-fetch.md",permalink:"/objection-workshop/docs/create-and-fetch",editUrl:"https://github.com/stackworx/objection-workshop/edit/master/docs/docs/create-and-fetch.md",sidebar:"someSidebar",previous:{title:"Data Models and Relations",permalink:"/objection-workshop/docs/data-models"},next:{title:"Adding seeds",permalink:"/objection-workshop/docs/seeds"}},i=[{value:"1. Create",id:"1-create",children:[]},{value:"2. Fetch",id:"2-fetch",children:[]}],l={rightToc:i};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Let's use this model we built to perform to basic operations on a ",Object(a.b)("inlineCode",{parentName:"p"},"Person"),". We'll create a PersonService class with stati methods to encompass this logic"),Object(a.b)("h3",{id:"1-create"},"1. Create"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Complete the create method to allow creation of a user, and two related pets by extending ",Object(a.b)("inlineCode",{parentName:"li"},"Person.query()"))),Object(a.b)("h3",{id:"2-fetch"},"2. Fetch"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Complete the ",Object(a.b)("inlineCode",{parentName:"li"},"fetchByName()")," method to return a user, or otherwise return undefined"),Object(a.b)("li",{parentName:"ul"},"Stretch goal: Modify the function to return the linked pets of a user")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import {Person} from '../models';\n\ninterface Pet {\n  name: string;\n}\n\nexport interface PersonCreateOptions {\n  name: string;\n  surname: string;\n  age: number;\n  pets?: Pet[];\n}\n\n// When making multiple calls dependent one one another, ensure you wrap in a transaction\nexport default class PersonService {\n  public static async create({\n    name,\n    surname,\n    age,\n    pets,\n  }: PersonCreateOptions): Promise<Person> {\n    try {\n      const newPerson = await Person.query();\n      //complete\n      return newPerson;\n    } catch (ex) {\n      throw new Error(ex);\n    }\n  }\n\n  public static async fetchByName(name: string): Promise<Person | undefined> {\n    const person = await User.knex();\n    //complete;\n  }\n}\n")))}d.isMDXComponent=!0}}]);